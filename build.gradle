plugins {
    id 'java'

    id 'com.diffplug.spotless' version '6.13.0'
}

ext {
    bytemanVersion = '3.0.20'
    xstreamVersion = '1.4.19'
    junitVersion =   '4.13.2'
}

repositories {
    mavenCentral()
}

spotless {
  java {
    googleJavaFormat()
    target("src/**/*.java")
  }
}

dependencies {
    implementation "org.jboss.byteman:byteman:$bytemanVersion"
    implementation "com.thoughtworks.xstream:xstream:$xstreamVersion"
    testImplementation "junit:junit:$junitVersion"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

// Build an uber agent JAR (helper classes + their deps + byteman agent)
tasks.register('createAgentJar', Jar) {
    dependsOn classes
    archiveBaseName.set('vigil-agent')
    archiveVersion.set(project.version)

    manifest {
        attributes(
            'Premain-Class': 'fr.vigil.AgentMain',
            'Can-Redefine-Classes': 'true',
            'Can-Retransform-Classes': 'true',
            'Boot-Class-Path': '', // left empty for runtime definition
            'Implementation-Title': 'Byteman',
            'Implementation-Version': '3.0.20'
        )
    }

    from(sourceSets.main.output)

    from {
        configurations.runtimeClasspath.collect { file ->
            if (file.isDirectory()) {
                file
            } else {
                zipTree(file).matching {
                    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
                }
            }
        }
    }
}

test {
    dependsOn createAgentJar
    testLogging {
        events "passed", "failed", "skipped", "standardOut", "standardError"
        exceptionFormat "full"
    }
}

build {
    dependsOn spotlessApply, createAgentJar
}
